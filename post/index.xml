<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Co1driver 的个人博客</title>
    <link>https://chongg039.cn/post/</link>
    <description>Recent content in Posts on Co1driver 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2014-{year}</copyright>
    <lastBuildDate>Tue, 17 Jul 2018 09:33:33 +0800</lastBuildDate>
    
	<atom:link href="https://chongg039.cn/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从泊松分布到泊松过程</title>
      <link>https://chongg039.cn/post/poisson-process/</link>
      <pubDate>Tue, 17 Jul 2018 09:33:33 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/poisson-process/</guid>
      <description> 泊松分布 泊松分布由二项分布演变而来。二项分布：
事件A在一次实验中发生的概率为P，将这个实验独立地重复n次，即做n次独立重复的伯努利实验，在这n次实验中事件A发生的次数记为x，概率有：
$$P(x=k)=C_{n}^{k}p^{k}(1-p)^{n-k}$$，记为\(X\sim B(n,p)\)，期望\(E=pn\)
认为在n趋于无穷大时，p为无穷小，期望值不变为一常数，记\(E=pn=\lambda\)
即：$$p=\frac{\lambda}{n}$$，则当\(n \to +\infty\)时，P将趋于泊松分布：$$P(x=k)= e^{-\lambda}\frac{\lambda^{k}}{k!}$$
期望和方差都是\(\lambda\)，\(\lambda\)表示一段时间内事件发生的次数。
泊松分布实例：
 一本书里，印刷错误的字的个数 一段时间内的次品率 某医院平均每小时出生的婴儿数 某网站每分钟的访问次数  独立增量过程 亦称可加过程（additive process)，是在不相交时段上增量相互独立的随机过程。
考虑实值过程 \(X{t},t\inT\) ，如果对于任意参数(t{0}&amp;lt;t{1}&amp;lt;&amp;hellip;&amp;lt;t{n})，随机变量$$X{t{0}},X{t{1}}-X{t{0}},&amp;hellip;X{t{n}}-X{t{n-1}}$$相互独立，则称其为独立增量过程。
若进一步假设\(X{t{k}}-X{t{k-1}}\)的分布只与差\(t{k}-t{k-1}\)有关，则称其为平稳独立增量过程。
状态离散的平稳独立增量过程是一类特殊的马尔可夫过程。泊松过程和布朗运动都是它的特例。从一般的独立增量过程分离出本质上是独立随机变量序列的部分和以后 ，剩下的部分总是随机连续的。因此研究独立增量过程，通常可以假设它是可分且随机连续的。
莱维-辛钦公式表明可分的随机连续的独立增量过程可表为正态过程，泊松型过程及实函数之和。
泊松过程 实验结果满足泊松分布的实验即为泊松过程。泊松过程把离散的伯努利过程变得连续化了：原来是抛n次硬币，现在变成了无穷多次抛硬币；原来某次抛硬币得到正面的概率是p，而现在p无限接近于0（\(p=\frac{\lambda}{n}\)），即：非常难抛出正面朝上的硬币；但是n次实验中硬币朝上的次数的期望不变，即\(\lambda\)恒定。在泊松过程中，我们把抛出硬币正面这样的事件叫做到达（Arrival）。把单位时间内到达的数量，叫做到达率（Arrival Rate），即\(\lambda$$\)。
泊松过程需要满足以下三个性质：
 在任意单位时间长度内，到达率是稳定的。对应于无穷次抛硬币的例子，我们相当于把一个单位时间分割成了无穷次抛硬币的实验，每次实验产生正面的概率都是一样的：$$p=\frac{\lambda}{n}$$，而在这无穷个抛硬币实验之后（即一个单位时间之后）我们期望能抛出\(\lambda\)个正面的硬币。这个性质类比于在有限次抛硬币（二项分布）的例子中保证了每次掷出硬币为正面的概率都为p。 未来的实验结果与过去的实验结果无关。对应于无穷次抛硬币的例子，之前不管抛出了多少个正面和反面的硬币，都不会影响之后硬币出现的结果。 在极小的一段时间内，有1次到达的概率非常小，没有到达的概率非常大。对应于无穷次抛硬币的例子，我们发现硬币朝上的概率\(p=\frac{\lambda}{n}\)趋向于0。  </description>
    </item>
    
    <item>
      <title>从 Reddit 愚人节像素大战说起</title>
      <link>https://chongg039.cn/post/2017-reddit-place/</link>
      <pubDate>Mon, 10 Apr 2017 23:01:33 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/2017-reddit-place/</guid>
      <description>&lt;p&gt;愚人节当天，我因为打球扭伤了自己的脚踝。那两天躺在床上无聊之余翻到了霍老师的一篇文章：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/Pz0NZ2t9fd_-RNFj1rT0hA&#34;&gt;《参与这场线上大战之后，我觉得人类未来还是有希望的》&lt;/a&gt;     (公众号：歪理邪说)&lt;/p&gt;

&lt;p&gt;这篇文章让我产生了极大的兴趣，立刻忍着疼痛抱来了电脑，登上了 Reddit 参与了这场线上大战。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Cloudflare 为自定义域名的 Github 博客完成全站 HTTPS 化</title>
      <link>https://chongg039.cn/post/all-https/</link>
      <pubDate>Wed, 22 Mar 2017 22:51:09 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/all-https/</guid>
      <description>&lt;p&gt;跟风，响应 Web 世界的号召，决定把博客全站换成 HTTPS 访问，并记录下遇到的一些问题。&lt;/p&gt;

&lt;h3 id=&#34;github-page&#34;&gt;Github Page&lt;/h3&gt;

&lt;p&gt;原来博客是部署在云服务器上，后来觉得没有这个必要，也不想花精力在维护上面，就重新把博客放回了 Github Page 。因此下面的文字并不针对自有服务器的博客用户进行说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决 Go 中遍历 map 的随机化问题</title>
      <link>https://chongg039.cn/post/map-in-order/</link>
      <pubDate>Mon, 13 Mar 2017 18:51:20 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/map-in-order/</guid>
      <description>&lt;p&gt;在 air-server 中有一个函数，支持解析 URL 的 query 并返回字段中城市的数据，如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /aqi/cities?1=成都&amp;amp;2=北京&amp;amp;3=杭州&amp;amp;4=西安
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端希望的返回值应该是按照输入顺序，即 1，2，3，4 返回的，但实际多次测试后得到的结果总会是不一样的顺序。想了想应该是 query 解析的结果，即&lt;code&gt;r.URL.Query()&lt;/code&gt;为 map 的原因。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go实现空气质量状况API服务器过程中的思考</title>
      <link>https://chongg039.cn/post/aqi-server-in-go/</link>
      <pubDate>Sat, 04 Mar 2017 16:27:52 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/aqi-server-in-go/</guid>
      <description>&lt;p&gt;学习Go之后第一个项目，是编写一个API服务器，提供城市AQI的JSON数据。&lt;/p&gt;

&lt;p&gt;既然要实现这个功能，要解决的问题一个是数据源，一个是Server。&lt;/p&gt;

&lt;p&gt;先说说数据源，如果仅仅和我们初步设想的一样，仅仅为我们的一款应用提供即时数据，那样只是做一个第三方数据的中转便可。不过为了以后可以针对性的做数据分析，还是需要将数据爬下来存在数据库。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我为什么选择Go</title>
      <link>https://chongg039.cn/post/why-i-choose-go/</link>
      <pubDate>Mon, 27 Feb 2017 12:50:39 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/why-i-choose-go/</guid>
      <description>&lt;p&gt;是的，我开始接触go语言了，如去年年底所说的那样。&lt;/p&gt;

&lt;p&gt;先说说我为什么不继续用Node，并不是因为这门语言不好。事实上，NodeJS作为一个争议颇多的“全栈”语言，才带我真正走进了编程世界。它的异步，并发，非阻塞，以及丰富的npm库，无一不证明了它在解决传统服务器端编程的很多非常棒的思想。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年终总结</title>
      <link>https://chongg039.cn/post/2016-summary/</link>
      <pubDate>Sat, 31 Dec 2016 16:59:03 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/2016-summary/</guid>
      <description>&lt;p&gt;年底了，总结一下这一年。&lt;/p&gt;

&lt;h4 id=&#34;工作室&#34;&gt;工作室&lt;/h4&gt;

&lt;p&gt;这一年有大半时间都是在创萌工作室度过的，也见证了创萌从当时的三五个人到现在的规模。&lt;/p&gt;

&lt;p&gt;工作室的巨总和迪哥算是我的导师。迪哥带着我从前端转向了nodejs，教会我如何作为一名全栈工程师来思考问题。而巨总眼界比较开阔，给我的更多是学习方法和技术趋势的指导。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 nodejs 模拟登陆电子科大信息门户并抓取信息</title>
      <link>https://chongg039.cn/post/mockland-uestc/</link>
      <pubDate>Thu, 08 Dec 2016 12:09:31 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/mockland-uestc/</guid>
      <description>&lt;p&gt;学校高层做了个公众号，把信息门户弄到微信上的浏览器上。本着干掉学校高层的一贯行事风格，觉得是时候搞一个正规的公众号来抢学校生意了。&lt;/p&gt;

&lt;p&gt;结果没想到并不是很顺利，信息门户登录有两个重定向页面，自己也对模拟请求服务器不是很熟悉，一步一步好歹是扒到了想要的数据，也浪费了好长时间。先拿出来了个命令行版本，还停留在 es5，准备熬过去考试月后全部重构成 es6，再加上流程控制，放到公众号上造福社会。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 服务器配置静态 IP 并 802.1x 拨号</title>
      <link>https://chongg039.cn/post/linux-server-staticip-8021x/</link>
      <pubDate>Sat, 12 Nov 2016 15:15:27 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/linux-server-staticip-8021x/</guid>
      <description>&lt;p&gt;终于布好工作室的服务器了。&lt;/p&gt;

&lt;p&gt;我写了个脚本一键部署静态ip和802.1x拨号：&lt;a href=&#34;https://gist.github.com/chongg039/3310467e329e00de3b6b04aaae646f3c&#34;&gt;ubuntu-server.sh&lt;/a&gt;，不想看我啰嗦的可以直接拿过来改改就能用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 vultr &#43; SS &#43; 锐速科学上网</title>
      <link>https://chongg039.cn/post/vultr-ss-serverspeed/</link>
      <pubDate>Mon, 03 Oct 2016 20:32:20 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/vultr-ss-serverspeed/</guid>
      <description>&lt;p&gt;接手工作室后，tesths 便把原来那个已经配置好的ss账号连同服务器一块给销了。平时ss又十分必要，就向他讨要了具体的方法，自己搭了一个。这里也是把方法贴出来。&lt;/p&gt;

&lt;h3 id=&#34;配置vultr主机&#34;&gt;配置vultr主机&lt;/h3&gt;

&lt;p&gt;V家的主机算得上是性价比较高的一款了，而且有日本和新加坡的线路，相对来说延迟比较稳定。截止我购买的时候是每个新用户有20刀的返利，还是比较划算的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决 ubuntu 下键盘错位问题</title>
      <link>https://chongg039.cn/post/ubuntu-keyboard-error/</link>
      <pubDate>Sun, 02 Oct 2016 15:43:36 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/ubuntu-keyboard-error/</guid>
      <description>&lt;p&gt;很悲催的键盘错位了，就这个系统有问题，以前也没遇到过。简而言之就是@和“互换，#打不出来等。问题不大，但是影响输入体验。
工作室的小伙伴都说我这电脑只有我会用。。。&lt;/p&gt;

&lt;p&gt;之前在网上搜到的解决办法是在终端输入：
&amp;gt;sudo dpkg-reconfigure keyboard-configuration
//需要安装keyboard-configuration&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用ngrok实现内网穿透</title>
      <link>https://chongg039.cn/post/ngrok/</link>
      <pubDate>Sun, 18 Sep 2016 09:37:45 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/ngrok/</guid>
      <description>&lt;p&gt;今天想用nodejs写一个微信公众号服务，很尴尬的发现自己的腾讯云学生服务器已经三个月没续费被收回了。工作室的这台服务器又不是很想动，于是就想到前一段时间看的一个实现内网穿透的工具ngrok，花了一段时间部署在了自己的ubuntu上。又化了两块钱买了个域名，准备以后作为工作室测试来用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自用 Chrome 插件分享</title>
      <link>https://chongg039.cn/post/chrome-extensions/</link>
      <pubDate>Sat, 21 May 2016 15:45:01 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/chrome-extensions/</guid>
      <description>&lt;p&gt;这里会持续不断分享一些自己觉的好用的 Chrome 插件，有些也会弃用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建 Linux 开发环境</title>
      <link>https://chongg039.cn/post/build-ubuntu-environment/</link>
      <pubDate>Thu, 12 May 2016 19:29:07 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/build-ubuntu-environment/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;先说说我为啥要干这事儿。
前段时间迪哥要我们用node搞一个最小化 MEAN 产品，没想到只是在搭建开发环境上windows就各种不兼容，出现了许多奇奇怪怪的bug，再加上国内关于node的开发教程确实相对比较少，没有好的学习资源。搞了virtualbox虚拟机，但是内存和性能又开始捉急。干脆换到ubuntu，一步到位，特此记录下过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>说说es5中的闭包</title>
      <link>https://chongg039.cn/post/talk-about-closure/</link>
      <pubDate>Mon, 18 Apr 2016 19:26:22 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/talk-about-closure/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;匿名函数&lt;/strong&gt;：下面是最常见的一种&lt;strong&gt;函数表达式&lt;/strong&gt;的书写形式
&lt;code&gt;
var functionName = function(arg0, arg1, arg2){
//函数体
}
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即：创建一个函数，并将其复制给变量&lt;code&gt;functionName&lt;/code&gt;，这种情况下创建的函数叫做匿名函数(anonymous function)，&lt;strong&gt;因为&lt;/strong&gt;&lt;code&gt;function&lt;/code&gt;&lt;strong&gt;后面没有标识符&lt;/strong&gt;，其&lt;code&gt;name&lt;/code&gt;属性是空字符串。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写在前面</title>
      <link>https://chongg039.cn/post/hello-world/</link>
      <pubDate>Sun, 17 Apr 2016 19:29:07 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/hello-world/</guid>
      <description>&lt;h2 id=&#34;我为什么建博客&#34;&gt;我为什么建博客&lt;/h2&gt;

&lt;p&gt;大二本科加入创萌工作室学习前端，整个学习阶段对于笔记以及感悟的整理从印象，有道云转移到Quip，感觉最好还是有一个独立博客更为方便。在爬了两个星期的坑后使用Hexo+huno主题以及一些开源插件完成了整个博客的大致创建。
&lt;/br&gt;
&lt;/br&gt;
博客主要用于私人的学习笔记以及感悟随笔，以供各位交流学习，若无特殊说明欢迎转载，但请注明出处。博客中转载文章的著作权归原作者所有。
&lt;/br&gt;
&lt;/br&gt;
欢迎订阅我的博客，访问我的Github，互相学习，共同进步。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>