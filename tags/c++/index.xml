<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Co1driver 的个人博客</title>
    <link>https://chongg039.cn/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Co1driver 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2014-{year}</copyright>
    <lastBuildDate>Sun, 20 Oct 2019 15:51:31 +0800</lastBuildDate><atom:link href="https://chongg039.cn/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[基础知识]C&#43;&#43;基础知识汇总</title>
      <link>https://chongg039.cn/post/cxx-base/</link>
      <pubDate>Sun, 20 Oct 2019 15:51:31 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/cxx-base/</guid>
      <description>指针和引用 联系 C++底层中引用是通过指针实现的，在实现层面上引用就是指针，指向同一对象的内存地址。
所有对引用的操作就是对原始对象的操作。
区别  引用只是别名，不是实体类型，因此编译器不为引用分配单独的内存空间，而指针有自己的内存空间，因此某种程度上指针不能被引用取代； 引用必须被初始化且不能为空，但可以有未初始化的空指针； 引用一旦初始化就不能更换目标，即不能被初始化多次，指针可以更改指向的对象； 可以有指针数组，不能有引用数组，因为引用没有被分配内存； 当引用作为函数的形参时，因为函数形参和实参是同一个对象，避免了复制对象的开销； 若对引用型参数做const修饰，则不会调用拷贝构造函数，提高效率； 若引用作为函数的返回结果，需要保证函数返回后被引用的目标一直有效，即不能返回函数内部的局部对象的引用（因为离开作用域后会被析构掉）。  数组和指针 C++不记录数组本身的大小，因此一定注意不要越界访问。
数组作为形参传递时会退化为同类型的指针：
int data[] = {1, 2, 3, 4, 5}; int size1 = sizeof(data); // 20 int *data2 = data; int size2 = sizeof(data2); // 4  int GetSize(int data[]) { return sizeof(data); } int size3 = GetSize(data); // 4 sizeof使用与陷阱 https://www.cnblogs.com/chio/archive/2007/06/11/778934.html
内存对齐 尽管计算机中内存是按照字节byte划分的，但不是寻址可以从任意的byte开始。一般来说计算机会对基本数据类型数据在内存中存放的位置加以限制，要求首地址必须是某个数（一般是4和8）的倍数，这就是内存对齐。
因为虽然计算机按照字节划分存储空间，但处理器存取一次内存不是按照一个字节存取的，一般以双字节、4字节、8字节甚至到32字节存取。这被称为内存存取粒度。
对32位处理器的int类型（4字节），若数据现在可以存放在任一字节开始处，会产生性能的损失。比如，现在从地址1字节开始存放int（1-5，左开右闭），读取时从0字节开始读取一个4字节大小的块，需要访问两次内存。第一步先读取0-4左开右闭字节快，剔除0地址字节；第二步访问4-8左开右闭字节快，剔除5、6、7三个字节块。然后将这两部分得到的合并放入寄存器，需要做很多工作。有了内存对齐，那么只能从规定的边界存放和读取，访问一次内存就可以了。
设置编译器的”对齐系数(对齐模数)“的预处理指令为#pragma pack(n)，一般32位系统下对齐系数为n=4，64位系统下对齐系数为n=8。还有一个概念为”对齐单位“，也称有效对齐值，是指n和结构体中最长数据类型（基本数据类型）长度中较小的那一个值。
下面说一下内存对齐规则，主要有两条：
 结构体中第一个成员的offset为0，之后每个成员都相对首地址的offset都是”该成员大小“和”对齐单位“中较小的那个的整数倍。如有需要可以添加进填充字节； 结构体的总大小为”对齐单位“的整数倍，如有需要会在最末尾成员添加填充字节。  分析下下面三个例子：
#pragma pack(4) // 先使用第一条规则 // 对x, 对齐单位min(4, 4) = 4, 按照4字节对齐, 不用偏移, 从0开始占用4个字节 // 对c1, 对齐单位min(4, 1) = 1, 按照1字节对齐, 相对于首地址偏移min(1, 1) = 1的倍数, 从4开始占用1个字节 // 对c2, 对齐单位min(4, 1) = 1, 按照1字节对齐, 相对于首地址偏移min(1, 1) = 1的倍数, 从5开始占用1个字节 // 再使用第二条规则, 结构体大小需要是对齐单位的整数倍, 补2个字节在末尾 // sizeof(x1) = 8 typedef struct x1 { int x; char c1; char c2; } x1; // 先使用第一条规则 // 对c1, 对齐单位min(4, 1) = 1, 按照1字节对齐, 不用偏移, 从0开始占用1个字节 // 对c2, 对齐单位min(4, 1) = 1, 按照1字节对齐, 相对于首地址偏移min(1, 1) = 1的倍数, 从1开始占用1个字节 // 对x, 对齐单位min(4, 4) = 4, 按照4字节对齐, 相对于首地址偏移min(4, 4) = 4的倍数, 需要先填充2位, 再从4开始占用4个字节 // 再使用第二条规则, 结构体大小需要是对齐单位的整数倍, 不用补填充字节 // sizeof(x2) = 8 typedef struct x2 { char c1; char c2; int x; } x2; // 先使用第一条规则 // 对c1, 对齐单位min(4, 1) = 1, 按照1字节对齐, 不用偏移, 从0开始占用1个字节 // 对x, 对齐单位min(4, 4) = 4, 按照4字节对齐, 相对于首地址偏移min(4, 4) = 1的倍数, 需要先填充3位, 再从4开始占用4个字节 // 对c2, 对齐单位min(4, 1) = 1, 按照1字节对齐, 相对于首地址偏移min(1, 1) = 1的倍数, 从8开始占用1个字节 // 再使用第二条规则, 结构体大小需要是对齐单位的整数倍, 补3个字节在末尾 // sizeof(x3) = 12 typedef struct x3 { char c1; int x; char c2; } x3; #pragma pack() 准确地讲这是属于内存的字节对齐。还有一个问题是大端对齐和小端对齐，这和处理器的架构有关系。大端对齐模式就是数据的低位保存在内存的高地址，内存的低地址存放着数据的高位。小端对齐模式就是数据的低位保存在内存的低地址中，而数据的高位保存在内存的高地址中。一般都是使用小端对齐的方式，大端对齐主要用在一些大型机的处理器中。</description>
    </item>
    
  </channel>
</rss>
