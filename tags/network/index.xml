<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on Co1driver 的个人博客</title>
    <link>https://chongg039.cn/tags/network/</link>
    <description>Recent content in Network on Co1driver 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2014-{year}</copyright>
    <lastBuildDate>Thu, 20 Feb 2020 20:32:59 +0800</lastBuildDate><atom:link href="https://chongg039.cn/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[基础知识]计算机网络</title>
      <link>https://chongg039.cn/post/network-base/</link>
      <pubDate>Thu, 20 Feb 2020 20:32:59 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/network-base/</guid>
      <description>TCP拥塞控制：慢开始、拥塞避免、快重传、快恢复 建议阅读博客。
并发和线程 线程数是不是越大越好？ 肯定不是的，首先服务器的cpu核数有限，同时并发的线程数是有限的，1核cpu设置10000个工作线程是没有意义的；线程的切换是有开销的，如果线程切换过于频繁，反而使性能降低。
调用sleep()函数的时候，线程是否一直占用cpu？ 不占用，等待时会把cpu让出来，给其他需要cpu资源的线程使用，不止sleep()函数，在进行一些阻塞调用，例如网络编程中的阻塞accept()【等待客户端连接】和阻塞recv()【等待下游回包】也不占用cpu资源。
补充：sleep与wait方法的区别可以参见之前的一篇博客的介绍：http://blog.csdn.net/megustas_jjc/article/details/71304979
如果cpu是单核的，设置多线程有什么意义，能提高并发性能么？ 即使是单核，使用多线程也是有意义的
 多线程编码可以让我们的服务/代码更加清晰，有些IO线程收发包，有些Worker线程进行任务处理，有些Timeout线程进行超时检测 如果有一个任务一直占用CPU资源在进行计算，那么此时增加线程并不能增加并发，例如这样的一个代码while(1){ i++; }该代码一直不停的占用CPU资源进行计算，会使CPU占用率达到100% 通常来说，Worker线程一般不会一直占用CPU进行计算，此时即使CPU是单核，增加Worker线程也能够提高并发，因为这个线程在休息的时候，其他的线程可以继续工作  TCP序列号和确认号 TCP首部固定长度20字节，可选40字节，即最长60字节。
序列号占32位，即4字节，用来保证交付到的报文的顺序组合，因为可能不是顺序到达的。序号字段只有在下面两种情况的任意一种才有意义：
 数据字段至少包含一个字节 这是一个 SYN 段，或者是 FIN 段，或者是 RST 段。  每传送一个 TCP 段，都要等待对方回复一个确认。不过这种方式效率太低，在 TCP 协议中，一般采用累积确认的方式，即每传送多个连续 TCP 段，可以只对最后一个 TCP 段进行确认。
对方通过回复一个确认号，来表示确认已经接收到了哪个 TCP 段。比如发送方发送了一个报文段序号为 301 的 TCP 段，这个段携带了 100 字节数据，则接收方应当回复的确认号是 401，它表示接收方已经收到了字节序号为 [0, 400] 的数据，现在期望你发送字节序号为 401 以及以后的数据。
保障udp可靠性 UDP不属于连接协议，具有资源消耗少，处理速度快的优点，所以通常音频，视频和普通数据在传送时，使用UDP较多，因为即使丢失少量的包，也不会对接受结果产生较大的影响。
传输层无法保证数据的可靠传输，只能通过应用层来实现了。实现的方式可以参照tcp可靠性传输的方式，只是实现不在传输层，实现转移到了应用层。
最简单的方式是在应用层模仿传输层TCP的可靠性传输。下面不考虑拥塞处理，可靠UDP的简单设计。
 添加seq/ack机制，确保数据发送到对端 添加发送和接收缓冲区，主要是用户超时重传。 添加超时重传机制。  详细说明：送端发送数据时，生成一个随机seq=x，然后每一片按照数据大小分配seq。数据到达接收端后接收端放入缓存，并发送一个ack=x的包，表示对方已经收到了数据。发送端收到了ack包后，删除缓冲区对应的数据。时间到后，定时任务检查是否需要重传数据。</description>
    </item>
    
  </channel>
</rss>
