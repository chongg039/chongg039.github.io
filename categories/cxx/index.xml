<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cxx on Co1driver 的个人博客</title>
    <link>https://chongg039.cn/categories/cxx/</link>
    <description>Recent content in cxx on Co1driver 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2014-{year}</copyright>
    <lastBuildDate>Thu, 06 Feb 2020 19:43:22 +0800</lastBuildDate><atom:link href="https://chongg039.cn/categories/cxx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用传值和std::move代替传引用可能是更明智的做法</title>
      <link>https://chongg039.cn/post/pass-by-value-then-move-in-ctor/</link>
      <pubDate>Thu, 06 Feb 2020 19:43:22 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/pass-by-value-then-move-in-ctor/</guid>
      <description>这里承接上一篇，继续阐述本人对右值引用、移动构造、移动语义以及编译器优化的一些看法。
问题的出现 假设编写一个类的带参数的构造函数（注意，不是默认构造，也不是拷贝构造和移动构造）：
我有这种想法：因为我这个函数既要支持左值实参，也要支持右值实参，所以要对这个构造函数进行重载。但Clang-Tidy会给出这样一条建议：
Clang-Tidy: Pass by value and use std::move 这让我很疑惑，一般不是会建议传引用减少拷贝对象产生的开销吗。当我点击了这条建议，第一个构造函数被替换成了：
explicit Obj(std::string s) : s_(std::move(s)) { std::cout &amp;lt;&amp;lt; &amp;#34;copy&amp;#34; &amp;lt;&amp;lt; std::endl; }; 传入了一个值，为了防止引发拷贝，直接对这个值使用移动语义，首先这里的形参看起来是没有规定是左值还是右值的，但前面说过，移动语义是将一个左值引用转换为一个右值引用，从而引发std::string的移动构造，那这样看起来这个构造函数还是只能接受左值实参，因为对右值使用移动语义会引发什么，现在不得而知。
所以这条建议也只是将第一个构造函数替换掉了，第二个还是保留。我现在构造一个临时对象理论上会调用第二个构造函数，但实际上不是这样：
编译器显示调用的构造函数有歧义，这是什么情况！也就是说我给构造函数传入了一个右值引用，第一个使用了移动语义的构造函数也能被调用。行吧，编译器蒙了，我也蒙了。
那大不了我把第二个去掉好吧，去掉之后：
竟然一切正常！那这就证明了两点：
 值形参不区分左值引用和右值引用（从行为上来看）； 使用“传值+移动语义”编写函数，可以减少函数重载。  但这也至少有了一个问题，就是对一个右值引用使用移动语义会出现什么情况？换句话说，右值和左值的真正区别应该不止上篇博客说的那些。
右值引用是一个左值 这里在之前看吴咏炜老师的文中提到过，当时是保持一个怀疑态度的。写完上一篇文章后对这个基本赞同，毕竟右值引用可以取地址可以赋值，所有的行为和左值几乎一模一样，但还是没有一个直观的感受。
而且上一篇文章中有个观点是有一些问题的（现已更正）：将亡值是一个纯右值，这是我理解有误。事实上从吴老师画的一张图可以看出：
首先对吴老师的这张图片表示感谢。从图上来看，一个将亡值（xvalue）即是一个右值（rvalue），也是一个广义左值（glvalue），而非是一个纯右值（prvalue）。那么纯右值和将亡值到底有什么区别呢？
事实上，在C++11之前，一般只有右值这样一种说法。在C++11提出了移动函数、移动语义之后，可以将xvalue视作一种语法糖。纯右值一般是纯粹的字面量，或是一个不具名的临时对象。但为了C++适应语言层面更广的情况，便提出了右值引用这样一种新的类型，使用所谓的“资源管理权转移”的方式，来减少拷贝资源带来的开销。对于一个（临时）对象，一旦他完成了资源的转移，也就可以被析构掉了。换言之，当一个右值对象“将要”进行某些个初始化或者赋值操作，我们就可以认为他是“将亡”的，因为一旦这个动作进行完毕，他就会被析构掉。
为了方便移动构造和移动赋值，C++11便对这类右值赋予了一个新的值类别“将亡值”，用以和纯粹的字面量做区分。事实上，我们有时候没必要区分的这么细。
再回到这个小标题，右值引用是一个左值。事实上这句话应该是：具名的右值引用是左值。什么是具名呢，看几个例子：
// 自增自减 ++i; // 左值，先加再返回，返回的是i，具名，所以是左值 i++; // 右值，先返回一个临时的副本在加，这份拷贝不具有名字  // 解引用和取地址 *p; // 左值，获取的是一个存在的实体，&amp;amp;(*p)也成立 &amp;amp;a; // 右值，取地址得到的是一个纯粹的字面量  // 其他一些操作符 a+b; // 右值 a==b; // 右值  // 例外，字符串字面量是一个左值，可以取地址 &amp;amp;&amp;#34;hello&amp;#34;; // 成立，是左值  void test(Obj &amp;amp;&amp;amp;a) { Obj b = a; // 继续访问a } // 如果Obj声明了移动构造，那么这个赋值操作理应调用移动构造函数。但事实上，当一个右值引用传入函数对象内，其类型就将会变成左值（命名对象）。那么这个赋值操作就将会调用Obj的拷贝构造函数，之后继续访问a在堆上的资源也是合理的。  // 事实上，若test声明的返回值是一个左值引用，然后返回一个a，也是对的。这也印证了右值引用传入参数后会变成一个左值，因为一个右值引用是不能绑定到一个左值引用上的。 关于左值和右值暂时就说到这吧，感觉头有点晕……C++11本身是为了逻辑上方便和提高效率才搞出了移动构造、移动赋值和将亡值这些东西，但就是有点费脑子……</description>
    </item>
    
    <item>
      <title>右值引用、移动构造和移动语义std::move</title>
      <link>https://chongg039.cn/post/rvalue-reference-and-move-ctor/</link>
      <pubDate>Sat, 01 Feb 2020 10:02:22 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/rvalue-reference-and-move-ctor/</guid>
      <description>前段时间在读Effective C++，当时对书中提到的移动构造函数一知半解。最近在做项目的时候遇到并重新思考了一下这个问题，在这里写一下自己的浅见。这里假设你已经理解并能熟练运用copy constructor以及copy assignment了。
左值与右值 介绍这个的文章很多，这也是理解什么时候调用拷贝构造、什么时候调用移动构造的一个比较关键的地方。
左值（lvalue） 左值（左值引用）是一个可被赋值的对象，通常出现在赋值表达式等号的左侧。有文章将左值定义为非临时的对象，即可以在后面被使用、被引用，如：
int i = 0; std::string s{&amp;#34;hello&amp;#34;}; 这里的i和s都是左值，后面都可以使用这两个非临时对象。
右值（rvalue） 与之对应，右值不可以被赋值，通常是一个临时对象。如上面的0、&amp;quot;hello&amp;quot;就是右值，只在当前语句中生效，脱离了当前语句的话一般不能在下面的句子中获取到，一般也不具备实际意义。
这里需要注意几点：
  C++11前，最多可以用一个常量引用绑定一个右值在下文使用，但这样绑定的右值不能被修改：
const int &amp;amp;i = 1; // can not be changed ``
  右值本身不是不能修改的，如上文所说，临时对象都是右值，那么调用一个临时对象的setter方法即可修改这个临时对象：
T().set_value(); ``
  这里比较需要注意的是，临时对象都是右值，准确的说是一个“将亡值”，这对于返回值为non-trivial对象的函数有关键性的意义。
左值和右值的符号表示 函数传参时，&amp;amp;表示接受一个左值，为了与之区分，&amp;amp;&amp;amp;表示接受一个右值，看下面这个重载函数：
void RecvValue(int &amp;amp;i) { std::cout &amp;lt;&amp;lt; &amp;#34;get a lvalue&amp;#34;; } void RecvValue(int &amp;amp;&amp;amp;i) { std::cout &amp;lt;&amp;lt; &amp;#34;get a rvalue&amp;#34;; } void Wapper(int &amp;amp;&amp;amp;i) { // 注意这种情况，调用的是第一个  // 因为临时对象在参数传递时会变成命名对象（左值）  RecvValue(i); } 一般也称一个T &amp;amp;&amp;amp;t为一个右值引用。</description>
    </item>
    
  </channel>
</rss>
