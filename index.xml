<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Co1driver 的个人博客</title>
    <link>https://chongg039.cn/</link>
    <description>Recent content on Co1driver 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2014-{year}</copyright>
    <lastBuildDate>Wed, 29 Jan 2020 19:51:25 +0800</lastBuildDate>
    
	<atom:link href="https://chongg039.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2019 年终总结</title>
      <link>https://chongg039.cn/post/2019-summary/</link>
      <pubDate>Wed, 29 Jan 2020 19:51:25 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/2019-summary/</guid>
      <description>看日期就知道，这篇总结其实是在2020年初，由于流感肆虐出不了门，在家里写了补上的。最近发生了许多大事，包括我最喜欢的NBA球星因意外离去，让人痛心。对于这些事情下面一概不谈，就简单回顾一下2019年我做的主要工作、收获，以及对未来的一些展望吧。
项目经历 首先是研究生期间的工作。从六月份的暑假开始研一结束，也标志着我们这一届正式开始做这个国家重点研发计划立项的项目。虽然已经是第二期了，但是由于中间断过档，之前的文档不完善，再加上老师要求全部换用新的技术栈，一开始也是很迷茫，不知道如何下手。幸得师兄和同门们的互相鼓励和帮助，让这个项目得以有了一个初步的雏形。我和一帮同志主要是负责项目的自然语言理解部分，也是最前端的部分，需要将文字叙述转化成我们能够使用的知识表述类型。鉴于有的部分涉及保密，这里只能说明一下大概的整个的摸索过程。
六到八月份，我主要是在用深度学习探索解决这方面问题的可能性，因为研一的时候自己摸索过、请教过一些问题，自己也对这些端到端的方法比较感兴趣。加上18-19年不是提出了Bert和Transformer嘛，没别的，就是强，就是好用。而我们这边的大类问题也无非就是一些传统的NER、RE还有指代消解什么的，就想在传统的标注网络和分类网络上搞搞创新，看看可不可行。不谦虚地说，那时候不屑于和他们做理论的人一样，拿一个写好的模型改一改，甚至调调参数，就写个论文发出去了。咱真是心气高，想把里面的原理彻底搞懂，就是生写，从最原始的来，手动求梯度，在纸上算好各个张量的维度，模仿别人搞数据预处理，再从头开始用TensorFlow一步一步编写各个网络模块，最后再去验证模型的效果。当然上面这些自夸都是玩笑话哈哈，回头想一想这也许就是我为什么发不出论文来了吧……不过说实在的，这段时间的经历，不断地去想去算、再去问师兄解答疑惑，最后再用代码真正将其一步一步实现出来，确实让我受益良多。直接导致的一个后果就是之后基本再出什么新的网络模型，都能比较快的去理解作者的本意，毕竟大部分是些换汤不换药的东西……
上面的话可能有些引战了，受到冒犯的朋友们还请不要当真哈哈。话说回来，为什么最后我们的项目中不以这些深度网络模型为主呢。随着项目的推进，我在其中发现的一个主要问题是，在我们这个限定领域内做知识表示和自然语言处理要求极度精确，就是像我们老师希望达到的是百分之百的准确那样。这和在开放领域当中不同，因为语言这个东西是因人而异的，再说从概率上说也不能保证事情发生的绝对正确性（我指的是在NLP领域中）。那么如何在限定领域内无限逼近这个要求呢，我想出来的方法就是让纠错的代价逼近在这个领域内能逼近的最小。这样说有些抽象了，其实就是如果系统出了错（不论是线下调整还是上线后），能够以最快的方式、最小的代价将问题修复，那么在一个有限的时间内，系统将是越来越精确的，也就是说是朝着百分之百精确的方向前进的，就可以了。
一个深度学习模型不可能达到这个效果，至少在我落笔的此刻我还没有见过这种类型的模型。假设我的分类网络用100万特定领域的语料训练出来了99.5%的准确度（我们就算假设这个是测试集准确率），现在遇到了一条错误的数据，如何让模型学习到这条数据？换言之如何让模型在原有的数据不受影响的情况下，将模型的精确度进一步提高。有人会说加数据，但加多少，如何加，又为什么能保证现有的正确的不会受到影响，至少现在的深度学习理论层面很难解释这个问题。
看到这里有人可能会觉得我说的这些问题，一看就是一个半吊子写出来的，根本不懂深度学习中的数学原理。的确，深度学习训练出来的模型本身就是一个概率模型，然后又妄图用非概率的方式去阐述它、应用它，是有些让人啼笑皆非。但我想说，这是我在具体业务中实践、感悟并总结出来的、仅适用于我们这个特殊项目的部分业务的一些经验。如果存在了某些出错但又必须要修正的情况，而方案本身修正它的代价又很大（就比如在这个项目中用神经网络做主要方案），那么能不能考虑一些其他的方案，将其作为新方案的补充，也未尝不可。
理清了这个思路，就是一步一步来，多看多尝试，最终敲定了一个比较合理的方案，也经过了项目组内部的高强度测试检验和完善。在这四个多月的过程中，我比较满意的是总结出了一套完整的在我们这个限定领域内的自然语言理解方案，重构了三次代码，剥离了许多子问题，并对这个领域有了更加深刻的认识。你说现在已经到了完美的程度了吗？当然没有，甚至说还远得很，但至少和我预想的一样，整体逻辑处于一种可控、易修正的状态，这已经令我很满意了。
从项目里面学到的另一个技能便是写文档。在项目进行到中期时，我越来越觉得维护一个内部的技术文档是多么的重要。不单单是为了将来的交接，也对自己回顾整理，乃至项目重构时有很大的帮助。代码注释在帮助理解项目整体思路上贡献甚微。因此我在内部服务器上搭建了一个gitbook作为项目文档，确实很有帮助。
这学期还做了一些内部零零散散的小项目，当然和这个主要的相比就显得有些微不足道了，也只是帮助了自己回顾了一下MySQL、TCP方面的一些知识。篇幅有限，不提也罢。
比赛 十月份初期拿了十天左右做了个天池的比赛，取得了一个还可以的成绩，之前有篇文章写过这部分内容，也不再啰嗦了。其实这不是第一个比赛，19年上半年做了个kaggle的，还有暑假做了个追一科技的，都不是很差当然也算不上好。虽然之后可能并不找算法为主的工作，但还是会做一下相关的比赛，一方面是增加经历，长长见识，另一方面还是要给枯燥的研究生生活增加点趣味性和挑战性。研究生研究生嘛，即便有项目不写论文，也不能老是重复着单调的工作。
之后的想法 首先是以后要做什么。很惭愧以前还说要做理论，要做算法，这还没有一年就发现自己不是这块料。当然如果以后的业务能是开发带一点算法，就更好了。有挑战性的工作就像玩游戏一样。
我在做这个项目的时候主要用的是python，这是出于两个因素。第一是许多深度学习的模型是用python写的，之前写的一些模块可以复用，也自然而然的用python编写现有的业务；第二是python确实简单易用，适合快速迭代开发。那时项目催得紧，用C++、Java不知道得开发到猴年马月，人手又少，所以也是赶鸭子上架。
现在项目迭代也几次了，也有时间回过头来审视语言层面的一些问题。这里我不是带语言优劣的节奏，就说一个很现实的问题，现在做开发，用python找不到工作啊！我本人在本科期间由JS、NodeJS、Golang一路做过来，就是因为本科期间C++没有学好，也成了我心中的一直以来的一个遗憾。既然上天给了我再一次选择的机会，我决定再向C++挑战一次。除了这些，我从本科大二开始就一直以Linux做主要开发环境，对深层次的编译、链接这些东西要比JVM虚拟机更加着迷（尽管知识水平并不允许我这么做）。因此，我也用业余时间将整个项目用C++重构了一次，尽管由于一些原因当时并没有完成，但我还是会在2020年的上半年再次迭代一个C++的正式版本，作为对自己实践能力的一次检验。
名著，主要就是阅读了C++ Primer、Effective C++和STL源码剖析这三本比较经典的，其中后两本读起来真是有一种酣畅淋漓的感觉，反倒是前一本可能是太过于大而全，有点长篇大论的啰嗦感。很感谢我的鹅厂师兄不厌其烦地帮我解惑，希望自己也早日达到这个高度。
结语 这次回家前也是去青岛中转了一下，找了找几位比较铁的同学了解下近况，畅谈了理想。有不堪工作繁重的，也有日子有奔头充满希望的，让还身为学生的我感触颇多。加上年后爆发的这次疫情以及种种意外，让人更加感叹世事的无常。活在当下，珍惜眼前，回去后好好撸码，勤去健身。</description>
    </item>
    
    <item>
      <title>天池全球数据智能大赛（赛场二）第7名解决方案</title>
      <link>https://chongg039.cn/post/yield-prediction-competition/</link>
      <pubDate>Tue, 22 Oct 2019 19:46:49 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/yield-prediction-competition/</guid>
      <description>第一次正儿八经组队参加的比赛，虽然没能拿到奖金但也取得了一个比较满意的成绩（初赛23复赛7），这里记录一下当时的解决思路。
首先这是一个农作物产量预测的比赛，属于比较传统的回归分析，这种类型的比赛只要做好 EDA ，一般都能取得不错的成绩，而不是说设计了一个多么精妙的网络结构。事实上官方提供的数据集最大的问题就是少，而且样本分布严重不均，这也成为了赛后受大家诟病的一个主要方面。
探索性数据分析（EDA） EDA of train data 取以下数值型天气特征并分析之间的相关性：
{ &amp;#34;日照时数（单位：h)&amp;#34;: &amp;#34;day_sun_hour&amp;#34;, &amp;#34;日平均风速(单位：m/s)&amp;#34;: &amp;#34;day_mean_wind&amp;#34;, &amp;#34;日降水量（mm）&amp;#34;: &amp;#34;day_rain&amp;#34;, &amp;#34;日平均温度（单位：℃）&amp;#34;: &amp;#34;day_mean_temperature&amp;#34;, &amp;#34;日相对湿度（单位：%）&amp;#34;: &amp;#34;day_relative_humidity&amp;#34;, &amp;#34;日平均气压（单位：hPa）&amp;#34;: &amp;#34;day_mean_pressure&amp;#34;, &amp;#34;日最高温度（单位：℃）&amp;#34;: &amp;#34;day_high_temp&amp;#34;, &amp;#34;日最低温度（单位：℃）&amp;#34;: &amp;#34;day_low_temp&amp;#34; } 以2017年区县id为16的地区为例：
可以得出：
 一个地区一年的日平均温度、日最高温度和日最低温度呈正相关； 以平均温度为例，日平均气压与日平均温度呈负相关。  取以下类别型天气特征并处理：
{ &amp;#34;02时风向&amp;#34;: &amp;#34;day_02_wind&amp;#34;, &amp;#34;08时风向&amp;#34;: &amp;#34;day_08_wind&amp;#34;, &amp;#34;14时风向&amp;#34;: &amp;#34;day_14_wind&amp;#34;, &amp;#34;20时风向&amp;#34;: &amp;#34;day_20_wind&amp;#34; } 做连续特征的话，依据下面的映射表映射到数值特征上：
{ &amp;#34;N&amp;#34;: 0, &amp;#34;NNE&amp;#34;: 22.5, &amp;#34;NE&amp;#34;: 45, &amp;#34;ENE&amp;#34;: 67.5, &amp;#34;E&amp;#34;: 90, &amp;#34;ESE&amp;#34;: 112.5, &amp;#34;SE&amp;#34;: 135, &amp;#34;SSE&amp;#34;: 157.5, &amp;#34;S&amp;#34;: 180, &amp;#34;SSW&amp;#34;: 202.5, &amp;#34;SW&amp;#34;: 225, &amp;#34;WSW&amp;#34;: 247.</description>
    </item>
    
    <item>
      <title>[CXX学习笔记]基础知识</title>
      <link>https://chongg039.cn/post/cxx-base/</link>
      <pubDate>Sun, 20 Oct 2019 15:51:31 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/cxx-base/</guid>
      <description>指针和引用 联系 C++底层中引用是通过指针实现的，在实现层面上引用就是指针，指向同一对象的内存地址。
所有对引用的操作就是对原始对象的操作。
区别  引用只是别名，不是实体类型，因此编译器不为引用分配单独的内存空间，而指针有自己的内存空间，因此某种程度上指针不能被引用取代； 引用必须被初始化且不能为空，但可以有未初始化的空指针； 引用一旦初始化就不能更换目标，即不能被初始化多次，指针可以更改指向的对象； 可以有指针数组，不能有引用数组，因为引用没有被分配内存； 当引用作为函数的形参时，因为函数形参和实参是同一个对象，避免了复制对象的开销； 若对引用型参数做const修饰，则不会调用拷贝构造函数，提高效率； 若引用作为函数的返回结果，需要保证函数返回后被引用的目标一直有效，即不能返回函数内部的局部对象的引用（因为离开作用域后会被析构掉）。  数组和指针 C++不记录数组本身的大小，因此一定注意不要越界访问。
数组作为形参传递时会退化为同类型的指针：
int data[] = {1, 2, 3, 4, 5}; int size1 = sizeof(data); // 20 int *data2 = data; int size2 = sizeof(data2); // 4  int GetSize(int data[]) { return sizeof(data); } int size3 = GetSize(data); // 4 sizeof使用与陷阱 https://www.cnblogs.com/chio/archive/2007/06/11/778934.html
左值和右值 c++中的变化 https://www.cnblogs.com/catch/p/3500678.html
右值引用和std::move https://blog.csdn.net/luotuo44/article/details/46779063
http://shaoyuan1943.github.io/2016/03/26/explain-move-forward/
右值引用减少对象拷贝 https://www.jianshu.com/p/da704a9c3969
https://www.cnblogs.com/qingergege/p/7607089.html</description>
    </item>
    
    <item>
      <title>2019 年中总结</title>
      <link>https://chongg039.cn/post/2019-mid-term-summary/</link>
      <pubDate>Sun, 12 May 2019 19:10:25 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/2019-mid-term-summary/</guid>
      <description>今年上半年也快过完了，回顾一下半年来的一些工作，觉得也算是小有成长。
生物信息 说实话我不太想回忆起这部分经历，毕竟跨学科学习对于我一个毫无生信方面经验的计算机学生来说实在是太痛苦了，还是跨的生物。
最开始在和师兄一起做基因优化和密码子聚类的工作。说实话导师在密码子聚类方面的一些想法确实很不错，也曾让我激动过一阵。但经历过无数次实验验证后也渐渐熄灭了热情，剩下的只有接踵而来的失败和迷茫。师兄密码子优化方面的工作小有成果，并且能和川大国家重点实验室的同学们共事过一段时间，也是让我感到非常荣幸的一件事。
搁置了这块工作后，我的导师便让我转向了蛋白质结构预测的工作，并曾信心满满地说“我们一定要参加2020年的 CASP 大赛”，仿佛 Alpha-Fold 的成功明天就会发生在我们身上一般。没办法，赶鸭子上架也得学呀。在详细了解了这个比赛后，知道了大家使用的模型都是一个双层的残差网络，也顺利地在 Github 上找到了一个实现。模型训练出来后，老师比较高兴，但也没有什么后续的动作了。我也乐的清闲，能少跟生物沾边就少沾边。
上半年最后做的一个和生信相关的小项目是药物-靶点预测系统，这个的实现也是参考的清华的一篇 nature 的论文。从这个项目中第一次系统地接触到了推荐系统，原理部分结合上学期修的矩阵理论也没有什么理解上的难点。在实验室做的第一篇论文分享也是这个，总的来说收获较大，也许工作后会考虑去做推荐算法。不过项目本身按照我老师的脾性，仍然搁置了就是了。
上半年做的生信方面的工作也就这些，没有锻炼出生物专业方面的技能，杂的倒是学了不少。也很感谢我在海洋大学的同学和她的师兄们，给予了我很大的帮助。不过我还是想说一句，我对生信一丁点的兴趣都没得。
自然语言 很显然，和川大在生物方面项目进展的并不顺利，我就被发配去了自然语言组。我是十分高兴的，一方面是自己本身对 nlp 比较感兴趣，同时做 cv 人太多了，另一方面是原来生信方面的工作大部分也是在处理氨基酸序列和 DNA 序列，和自然语言语料有共通之处。
第一个做了一个实体关系抽取器，用在我们的项目中抽取实体关系三元组，但准确的来说实体抽取是师兄的工作，我这边只是做了一个关系分类器。大概的思路就是使用字向量+实体的位置向量编码，输入到一个双向的 LSTM 中训练，最后输出到 softmax 分类器中。因为是用的语料都是短句，所以最终模型表现也比较好。
在这个项目中我觉得收获还是很大的，因为从设计模型、处理语料、参数调整，到中间矩阵的维度确认，一行行敲出代码并做调试，前前后后耗费了一周多的时间。其中最复杂的地方我觉得是在数据预处理部分，模型也就是多个中间矩阵的维度计算比较麻烦（我是全部画出来并手动计算的，原谅我的菜）。说来惭愧，通过这个过程我才第一次才真正理解了网络中每一步在做什么。以前虽然调试过许多模型，看过许多相关的书和视频，你要是让我去说名每一层网络中的参数是多少，为什么是这样，我还真有可能答不上来。
师兄肯定了我的工作，然而当我拿去给导师看的时候，导师却认为统计模型和深度学习模型都不能达到我们项目中要求的接近 100% 的分类准确率，并认为依存句法分析就可以解决大部分问题，让我回去重新用句法分析器做。有了前几次的经历，这次我已经有了心理准备，但心里还是有点不爽。
那能怎么办呢，做呗，只能拿哈工大的 LTP 基于句法分析树尝试去抽取关系。但依存树都是从一个动词开始分析句子的依存结构，抽取出来的事实三元组并不是我们需要的（实体1，关系，实体2）这种。在尝试了许多方法后，发现依存句法只能解决一些非常简单的题目，对那种多个实体的复杂长句就非常难以设计分析路径了。抛开使用深度网络的方法，现在要想解决关系抽取问题，目前只能依靠句模和规则库来构建了。
总的来说，这一段时间在 nlp 方面也算入了门，最重要的是找到了一个比较喜欢的方向，有机会的话也希望将来能从事这方面相关的工作。
阅读 之前说过我买了一个 kindle ，也算汇报一下情况吧。
最近读完了吴军老师的两本书：数学之美和浪潮之巅。其实我主要想说一下这两本书的写作风格我非常喜欢，平铺直叙却又耐得住咀嚼。我本人是非常喜欢看纪录片的，而且也一直认为能把晦涩难懂的知识以一种简洁明快而不枯燥的方式向人们普及是一种非常了不起的能力，而吴军老师恰恰就拥有这种能力。
我其实不太喜欢写博文，觉得有这种时间不如用来学习一些新的知识。但是自从买了 kindle 后，静心阅读的时间变长了，利用手机等方式的碎片化阅读变少了，有了更多的时间去思考平时遇到的问题，整个人也变得不是那么的浮躁。
能把自己遇到的问题，自己的想法记录下来，既是温故，又能知新，还可以与他人碰撞思维的火花，何乐而不为？可能是受到吴军老师的影响，现在的我的确是这么想的。希望将来有一日，我也能以一种优美而简洁的语言写下自己的想法，分享给他人。</description>
    </item>
    
    <item>
      <title>高级计算机视觉知识点总结</title>
      <link>https://chongg039.cn/post/advanced-computer-vision/</link>
      <pubDate>Sun, 12 May 2019 19:09:40 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/advanced-computer-vision/</guid>
      <description>我自己在做的方向是 NLP 相关，但这学期也选修了高级计算机视觉这门课程，其中很大一部分内容都是传统的视觉算法，和现在被人熟知的机器学习相关的 CV 领域还是有很大区别。由于这门课程也是学院第一次开课，所以也没有办法去做针对性的复习，故在此作以下学习记录，写下自己的理解，希望将来能温故而知新。
特征提取算法 涉及到的特征提取算法主要有 Harris 角点检测算法、Canny 边缘检测算法和 SIFT 尺度不变特征变换算法。
Harris Corner Detection 首先要理解角点和其具有的特征：
 角点是轮廓之间的交点 针对同一场景，即使视角发生变化，角点通常仍具备稳定的特征 角点附近的区域的像素点的梯度无论是方向还是幅值都会有较大的变化  针对以上角点的特征，Harris 算法的基本思想是：使用一个固定大小的窗口在图向上进行任意方向上的滑动，比较滑动前后的窗口中像素灰度变化的程度。若沿任意方向的滑动都有较大的灰度变化，则认为该窗口中存在角点。
现在要做的就是设计一个函数，来衡量滑动前后的灰度值变化，并设置一个阈值，当灰度变化超过这个阈值认为存在角点。
这个函数可以作如下表示：
$$ E(u, v) = \sum_{x, y} w(x, y) [I(x+u, y+v) - I(x, y)]^2 $$
其中 $w(x, y)$ 是窗口函数（矩阵），常用的有 (0, 1) 函数和高斯函数，$I(x, y)$ 表示灰度强度值。下面要用到泰勒展开式处理这个函数。
二维泰勒展开式为：
$$ f(x+u, y+v) = f(x, y) + uf_x(x, y) + vf_y(x, y) + &amp;hellip; $$
抛开 $w(x, y)$ ，先处理 $\sum[&amp;hellip;]^2$ 这部分：</description>
    </item>
    
    <item>
      <title>蛋白质结构预测比赛知识储备</title>
      <link>https://chongg039.cn/post/knowledge-of-casp/</link>
      <pubDate>Thu, 17 Jan 2019 14:25:08 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/knowledge-of-casp/</guid>
      <description>生物分子结构 有关生物分子四级结构的信息请参照维基百科相关词条。
蛋白质结构表征方式（氨基酸残基）  接触图（contact maps），接触图使得不需要 3D 渲染软件，就能够快速形象化地探索结构特征。此外，接触图的基本 2D 矩阵（称为接触矩阵），能够天然地作为随后自动知识发现或机器学习任务的数值输入。 距离图（distance maps） 氢键图  氨基酸（Amino acids） 氨基酸残基（amino acid residue） 组成多肽的氨基酸在相互结合时，由于其部分基团参与了肽键的形成而失去一分子水，因此把多肽中的氨基酸单位称为氨基酸残基，即由肽键链接的氨基酸失水部分。
它是一个分子的一部分，而不是一个分子。
氨基酸的氨基上缺了一个氢，羧基上缺了一个羟基。
简单的说，氨基酸残基就是指不完整的氨基酸。一个完整的氨基酸包括一个羧基（—COOH)，一个氨基(—NH2)，一个H，一个R基。缺少任何一个部分都算是氨基酸残基，并没有包括肽键的。
如甘氨酸残基为：—NH—CH2—CO—。
蛋白质中氨基酸残基数目的估算：氨基酸残基的数目=蛋白质分子量/110
蛋白质结构 蛋白质结构是指蛋白质分子的空间结构。作为一类重要的生物大分子，蛋白质主要由 碳、氢、氧、氮、硫等化学元素组成。所有蛋白质都是由 20 种不同的 L 型 α 氨基酸连接形成的多聚体，在形成蛋白质后，这些氨基酸又被称为残基。蛋白质和多肽之间的界限并不是很清晰，有人基于发挥功能性作用的结构域所需的残基数认为，若残基数少于 40 ，就称之为多肽或肽。要发挥生物学功能，蛋白质需要正确折叠为一个特定构型，主要是通过大量的非共价相互作用（如氢键，离子键，范德华力和疏水作用）来实现；此外，在一些蛋白质（特别是分泌性蛋白质）折叠中，二硫键也起到关键作用。为了从分子水平上了解蛋白质的作用机制，常常需要测定蛋白质的三维结构。由研究蛋白质结构而发展起来了结构生物学，采用了包括X射线晶体学、核磁共振等技术来解析蛋白质结构。
一定数量的残基对于发挥某一生物化学功能是必要的；40 - 50 个残基通常是一个功能性结构域大小的下限。蛋白质大小的范围可以从这样一个下限一直到数千个残基。目前估计的蛋白质的平均长度在不同的物种中有所区别，一般约为 200 - 380 个残基，而真核生物的蛋白质平均长度比原核生物长约 55% 。更大的蛋白质聚合体可以通过许多蛋白质亚基形成；如由数千个肌动蛋白分子聚合形成蛋白纤维。
不同层次的蛋白质结构 蛋白质的分子结构可划分为四级，以描述其不同的方面：
 蛋白质一级结构：组成蛋白质多肽链的线性氨基酸序列。 蛋白质二级结构：依靠不同氨基酸之间的 C=O 和 N-H 基团间的氢键形成的稳定结构，主要为 α螺旋 和 β折叠 。 蛋白质三级结构：通过多个二级结构元素在三维空间的排列所形成的一个蛋白质分子的三维结构。 蛋白质四级结构：用于描述由不同多肽链（亚基）间相互作用形成具有功能的蛋白质复合物分子。  除此之外还有侧链结构，根据侧链结构的不同可以分为 20 种常见氨基酸，各自在蛋白质中扮演着重要的角色。
定义不同类型的二级结构有不同的方法，最常用的方法是通过主链原子之间的氢键的排列方式来判断的。而在蛋白质完全折叠的状态下，这些氢键可以得到稳定。
更多详细内容参照维基百科蛋白质结构条目。
蛋白质结构预测 蛋白质结构预测 (Protein structure prediction) 是指从蛋白质的氨基酸序列中预测蛋白质的三维结构。也就是说，从蛋白质的一级结构预测它的折叠和二级、三级、四级结构。当前蛋白质结构预测技术的性能在蛋白质结构预测技术的关键测试（CASP）实验中被评测，蛋白质结构预测的网络服务器连续的评测是由社区项目 CAMEO3D 执行。</description>
    </item>
    
    <item>
      <title>2018 年终自检</title>
      <link>https://chongg039.cn/post/2018-summary/</link>
      <pubDate>Mon, 07 Jan 2019 14:14:55 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/2018-summary/</guid>
      <description>这篇文章现在才写是因为复习矩阵考试而耽误了。在这里提一句感谢寒号鸟学长的知乎专栏以及实验室小伙伴的耐心指点，让我这个数学基础并不是那么好的学生勉强看懂了矩阵理论讲的内容。另外之前翻译的那本书鸽了一段时间，因为我实在没有想到成电的研一课业压力会这么大，也就没有选修随机过程。之后可能会继续进行翻译工作，不过可能进度会比较慢罢了。
2018年对我来说算是比较重要的一年。3月初回学校进行预面试，并且成功通过复式成为了（原）自动推理实验室的一员。整个过程还是很轻松愉快的，当时也感觉 f 老师是个很 nice 的人，虽然现在并不是这么觉得。四五月份抽出时间完成了水水的毕业设计，之后便做了一个比较私人的决定：去一趟稻城亚丁转换下心情，也算是做一次毕业旅行吧。
稻城白塔
牛奶海
牦牛兄弟
虽然恶劣的天体条件和贫瘠的山路让人身心匹配，不过稻城之行还是领略了一下藏区的风土人情，呼吸了一下高原干净的空气。回来后老师叫我去教研室我也找了个借口溜了，回家和爸钓了几天鱼。
研一的生活比我想象的要紧凑很多。我对 f 老师的评价是：一个理想主义的嘴炮王。具体为什么这么评价他就不谈了，估计当你的导师想要同时研究图推理、CV、nlp、小分子合成、基因优化、靶向药生成、量子机器学习的时候，你也会这么评价他。估计之后很长一段时间我也许就要去川大华西那边做实验去了。
相比本科时期的工作室生活，读研的第一个学期还是收获很多的，最起码机器学习方面的知识学习了不少。而且重拾了 C++ ，最近为了863也在重新写起了 Java 。虽然水平不高，但总算是在成长，视野也在开阔。以后也许在 z 师兄的指导下先搞两年 nlp ，毕竟也和 f 老师做的基因序列任务有点关系。前一段时间参加了 kaggle 的一个 CV 比赛，虽然没有实现一个很好的模型，但也算一次体验，之后有想法会继续参加。
读书方面，下半年快年底买了一个 kindle ，虽然目前只是用来看技术相关的书籍。作为我的第一台电子墨水设备体验很不错，以后争取多读一些文学作品。没有时间行万里路，那就争取做到读万卷书。
2019 年还得继续努力，人菜就要多学习。</description>
    </item>
    
    <item>
      <title>我的第一台 kindle</title>
      <link>https://chongg039.cn/post/my-kindle/</link>
      <pubDate>Thu, 03 Jan 2019 20:09:57 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/my-kindle/</guid>
      <description>说来惭愧，一直想入手一个 kindle 但有点舍不得，怕买来成了泡面盖子。一直等到了 KPW4 的发售，张大妈上推送了一个拼多多的链接，800+，带原装保护壳也才850。这岂不是白送？果断下单，也算是为信仰充值了吧。
下面是个简短的开箱。
使用体验：总体来说体验还是不错的，180余克的体重，纯平的屏幕设计，细腻的屏幕，多级的背光以及不算慢的翻页体验，让我对这一款产品还是比较满意的。但是这样一款几年更新一代的产品竟然还在用 Micro USB 的接口，算是唯一美中不足之处吧。
至于使用方式，我主要是用来看一些技术上的书籍，减少自己看手机的时间。看双页的论文是不要想了，在6寸的屏幕上表现简直是灾难。书的获取方式、导入方式有需求的朋友请自行 Google ，我就不再这里传播了，希望以后能尽量支持正版。</description>
    </item>
    
    <item>
      <title>FMAM - 1.7：Additional Topics</title>
      <link>https://chongg039.cn/post/fmam-content-1.7/</link>
      <pubDate>Fri, 03 Aug 2018 08:31:59 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-content-1.7/</guid>
      <description>第 1.2, 1.3, 1.4, 1.5 和 1.6 节涵盖了 PH 分布和多元 PH 分布的基本理论。在本节中，我们将讨论概括和一些概括 PH 分布的理论问题。
1.7.1 离散的 PH 分布 考虑具有 m + 1 个状态的离散时间马尔可夫链，其概率矩阵为 $$ P= \biggl( \begin{matrix} T &amp;amp; \pmb{T ^ {0}} \\ 0 &amp;amp; 1 \end{matrix} \biggl) $$ 吸收到状态 $m+1$ 的时间表示为 $X$ ，我们将其定义为离散时间的 PH 随机变量。给出初始概率向量 $(\pmb{\alpha}, 1-\pmb{\alpha e})$ ，很容易得到 $$ P\{X=n\}= \begin{cases} 1 - \pmb{\alpha e} &amp;amp; if \quad n=0; \\\
\pmb{\alpha} T ^ {n-1} \pmb{T ^ 0} &amp;amp; if \quad n=1, 2, &amp;hellip; \end{cases} $$</description>
    </item>
    
    <item>
      <title>FMAM - 1.6：PH 分布的参数估计</title>
      <link>https://chongg039.cn/post/fmam-content-1.6/</link>
      <pubDate>Thu, 02 Aug 2018 22:02:09 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-content-1.6/</guid>
      <description>在概率论、随机建模和统计学中，概率分布的参数估计是一个基本问题。有关参数估计的参考资料的数量是巨大的。在本节中，我们主要讨论 PH 分布的参数估计。
PH分布的参数估计是指为一个来自样本 ${y _ {1}, y _ {2}, &amp;hellip;, y _ {n}}$ 的 PH 随机变量 Y 找到一个 m 阶的 PH 表示 $(\alpha, T)$。样本中，$y _ {k}$ 被称为样本点，n 被称作样本大小。我们假定样本点是独立收集的，那么我们定义 ${Y _ {1}, Y _ {2}, &amp;hellip;, Y _ {n}}$ 是独立同分布的随机变量 (i.i.d.r.v.s) ，它们具有和 Y 一样的分布。样本点 $y _ {k}$ 是 $Y _ {k}$ 的一个实现（可能翻译不准确？）。同样的，我们定义 $\{I(t), t \geq 0 \}$ 作为与 Y 相关的底层马尔可夫链 (the underlying Markov chain) 。
例子1.6.1：略 命题1.6.1 (Asmussen et al. (1996)) ： 对于 $y &amp;gt; 0$ ，我们有 $$ E _ {(\pmb{\alpha}, T)}[B _ i | Y=y] = \frac{\alpha _ {i}b _ {i}(y | T)}{\pmb{\alpha}\pmb{b}(y | T)}, i=1, 2, &amp;hellip;, m $$</description>
    </item>
    
    <item>
      <title>FMAM - 1.5：多元 PH 分布</title>
      <link>https://chongg039.cn/post/fmam-content-1.5/</link>
      <pubDate>Thu, 02 Aug 2018 16:01:51 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-content-1.5/</guid>
      <description>考虑连续时间上的马尔可夫链 $ \{ Y(t), t \geq 0 \} $，且具有有限状态空间 $ \{1, 2, &amp;hellip;, m \} $，无穷小的生成矩阵 $Q$ 和初始分布 $\alpha$ 。令 $A _ {k} $ 是 $ \{ 1, 2, &amp;hellip;, m \} $ 的子集，其中 $k=1, &amp;hellip;, K$，假设交集$ \{ A _ {k}, k=1, &amp;hellip;, K \} $ 是非空的且马尔可夫链将以 1 的概率被吸收到交叉点。
定义1.5.1 定义 $$ X _ {k} = min{t:Y(t) \in A _ {k}, t \geq 0}, k = 1, &amp;hellip;, K $$ 随机向量 $ X = (X _ {1}, X _ {2}, &amp;hellip;, X _ {K})$ 则被认为具有多元的 PH 分布（MPH）和多元的 PH 表示 $(\alpha, Q, A _ {k}, k = 1, &amp;hellip;, K)$ 。</description>
    </item>
    
    <item>
      <title>FMAM - 1.4：PH 分布和 PH 表示</title>
      <link>https://chongg039.cn/post/fmam-content-1.4/</link>
      <pubDate>Thu, 26 Jul 2018 10:30:01 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-content-1.4/</guid>
      <description>注：本书中 &amp;#34;order&amp;#34; 译作 “阶“，原因如下： 在 &amp;#34;Stat Trek&amp;#34; 上 &amp;#34;Matrix Order&amp;#34; 的释义为： The number of rows and columns that a matrix has is called its order or its dimension. By convention, rows are listed first; and columns, second. Thus, we would say that the order (or dimension) of the matrix below is 3 x 4, meaning that it has 3 rows and 4 columns. 矩阵具有的行数和列数 称为其 顺序 或 维度 。按照惯例，首先列出行，再给出列。因此，我们可以说下面矩阵的顺序（或维度）是3 x 4，这意味着它有 3 行 4 列。 本文中主要研究方阵，因此将 &amp;#34;the order of the matrix is n&amp;#34; 译作 ”n 阶方阵” 1.</description>
    </item>
    
    <item>
      <title>FMAM - 1.3：PH 分布的闭包属性</title>
      <link>https://chongg039.cn/post/fmam-content-1.3/</link>
      <pubDate>Fri, 20 Jul 2018 15:59:56 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-content-1.3/</guid>
      <description>在本节中，我们展示了一组 PH 分布在一些操作下是封闭的情况（例如，“min”，“max”，“+”）。闭包属性证明了随机建模中 PH 分布在数学上的动态可操作性，这体现了他们在应用中的关键作用。首先，我们考虑采用马尔可夫链方法练习 1.1.5 , 1.1.6 和 1.1.9 。
例子1.3.1： 假定 $X _ {1} $ 和 $X _ {2}$ 是分别具有参数 $\lambda _ {1} $ 和 $\lambda _ {2} $ 的相互独立的指数随机变量，显示 $min\{X _ {1}, X _ {2}\} $ ，$max\{X _ {1}, x _ {2}\}$ 和 $X _ {1} + X _ {2}$ 服从 PH 分布，并找出对应的 PH 表示。
回想一个和 $X _ {1}$ 相关的两阶段连续时间马尔可夫链，令 $I _ {1}(t)$ 为 $t$ 时刻的底层马尔可夫链的阶段。那么两阶段底层马尔可夫链 $\{I _ {1}(t), t \geq 0\}$ 的无穷小生成矩阵由下面给出 $$ Q _ {1} = \begin{matrix}1 \\ 2 \end{matrix}\begin{pmatrix}-\lambda _ {1} &amp;amp; \lambda _ {1} \\ 0 &amp;amp; 0\end{pmatrix} $$ 其中阶段 2 是吸收阶段。同样地，$I _ {2}(t)$ 由和 $X _ {2}$ 相关联的两阶段底层马尔可夫链定义。两条马尔可夫链 $\{I _ {1}(t), t \geq 0\}$ 和 $\{I _ {2}(t), t \geq 0\}$ 是相互独立的。</description>
    </item>
    
    <item>
      <title>FMAM - 1.2：PH 分布的定义和基本属性</title>
      <link>https://chongg039.cn/post/fmam-content-1.2/</link>
      <pubDate>Thu, 19 Jul 2018 20:11:50 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-content-1.2/</guid>
      <description>PH 分布在 Neuts（1975）中被引入来概括指数分布。在本节中，我们给出了相位分布的一个代数定义和一个概率定义，并介绍一些基本的属性。
定义1.2.1： 如果非负随机变量 X 的分布函数由下式给出，则它具有相位类型分布（PH分布）：
$$ F(t)=P\{X \leq t\}=1-\pmb{\alpha} exp(Tt) \pmb{e} \equiv 1- \pmb{\alpha}(\sum _ {n=0}^\infty \frac{t^n}{n!}T^n) \pmb{e},t \geq 0 \tag{1.9} $$
其中：
 $\pmb{e}$ 是全为 1 的列向量； $\pmb{\alpha}$ 是 m 阶的随机行向量（substochastic pmbtor 翻译不准确？），即 $\pmb{\alpha}$ 是行向量，$\pmb{\alpha}$ 中的所有元素都是非负的，$\pmb{\alpha} \pmb{e} \leq 1$ ，其中 m 是正整数； T 是 m 阶的子生成矩阵（subgenerator 翻译不准确？），即 T 是 $m \times m$ 矩阵，使得 (1) 对角线所有元素都是负的；(2) 所有非对角线元素都是非负的；(3) 一行所有元素之和均为非正数，且对所有行有效；(4) T 是可逆的。  我们称 T 为 PH 发生器，2 元组 $(\pmb{\alpha}, T)$ 称为 m 阶相位分布的相位表示（PH表示）。</description>
    </item>
    
    <item>
      <title>FMAM - 1.1：指数分布</title>
      <link>https://chongg039.cn/post/fmam-content-1.1/</link>
      <pubDate>Wed, 18 Jul 2018 17:01:14 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-content-1.1/</guid>
      <description>本章节定义了指数分布和与指数分布相关联的一些基本属性。
定义1.1.1： 如果一个非负随机变量Ｘ的概率分布函数（即累积分布函数 CDF）满足如下形式：
$$ F(t)=P\{X \leq t\}=1-exp(-\lambda t) \equiv 1-\sum _ {n=0}^{\infty}\frac{(-\lambda)^n t^n}{n!}, t \geq 0 $$
则称非负随机变量Ｘ服从指数分布。其中 $\lambda$ 是正实数，将Ｘ称为参数为 $\lambda $ 的指数随机变量。
取分布函数 F(t) 的导数，即得到指数分布的概率密度函数：
$$ f(t)=\frac{dF(t)}{dt}=\lambda exp(- \lambda t), t \geq 0 $$
练习1.1.1： 式子 $$ \int _ {0} ^ {\infty} \lambda e ^ {- \lambda t} dt=1 $$ 使用了分部积分法，试着从概率上解释（不使用任何计算）为什么积分的结果是 1 。
图 1.1 绘制了 $\lambda = 1$ 和 $\lambda = 5$ 时的指数分布的概率密度函数，这两者表现出了类似“指数”的形状。
练习1.1.2： 分别绘制 $\lambda = 0.</description>
    </item>
    
    <item>
      <title>FMAM - 预备内容：指数分布和 Erlang 分布 - Chapter 1 </title>
      <link>https://chongg039.cn/post/fmam-prepare-2/</link>
      <pubDate>Tue, 17 Jul 2018 17:19:48 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-prepare-2/</guid>
      <description>泊松分布是离散变量的随机分布，发生的次数之间是离散的。指数分布则针对连续型随机变量定义，即时间必须是连续的。
指数分布可以用来表示独立随机事件发生的时间间隔，比如旅客进入机场的时间间隔、打进客服中心电话的时间间隔、中文维基百科新条目出现的时间间隔等等。 – wikipedia
粗略地可以认为这两个分布之间有一种“倒数”的关系。
指数分布概率密度函数：$$f(x)=\lambda e^{-\lambda x},x \in [0,+\infty)$$
其中 $\lambda &amp;gt;0$ 是分布的一个参数，常被称为率参数（rate parameter）。即每单位时间发生该事件的次数。
累积分布函数：$$P(X\leqslant x)=1- e^{-\lambda x},x \in [0,+\infty)$$
注意：若令$\theta = \frac{1}{\lambda}$，概率密度：$p=\frac{1}{\theta}e^{-x/\theta}$，分布函数：$P(X\leqslant x)=F(x)=1-e^{-x/\theta},x \in [0,+\infty)$
这个 $\lambda $ 就是泊松分布中的 $\lambda $，此时指数分布的期望就是 $EX=\theta \quad (\lambda=1/\theta)$ 。
指数分布的描述对象是“连续型随机变量”。指数分布是泊松过程的事件间隔的分布：泊松分布表示的是事件发生的次数，“次数”这个是离散变量，所以泊松分布是离散随机变量的分布；指数分布是两件事情发生的平均间隔时间，“时间”是连续变量，所以指数分布是一种连续随机变量的分布。
指数分布的实例：
 旅客进机场的时间间隔 网站访问的时间间隔 婴儿出生的时间间隔  泊松分布是单位时间内独立事件发生次数的概率分布，指数分布是独立事件的时间间隔的概率分布。注两者的前提的前提是”独立事件”，事件之间不能有关联。
爱尔朗分布（Erlang Distribution）是一种连续型概率分布，该分布与指数分布一样多用来表示独立随机事件发生的时间间隔。相比于指数分布，爱尔朗分布能更好地对现实数据进行拟合（更适用于多个串行过程，或无记忆性假设不显著的情况下）。除非退化为指数分布，爱尔朗分布不具有无记忆性（或马尔可夫性质），因此对其进行分析相对困难一些。一般通过将爱尔朗过程分解为多个指数过程的技巧来对爱尔朗分布进行分析。
遵循爱尔朗分布的随机变量可以被分解多个同参数指数分布随机变量之和，该性质使得爱尔朗分布被广泛用于排队论中。
爱尔朗分布有两个参数，阶数（stage）$k$ 和均值 $\mu$ （也有用 $\lambda ={\frac {1}{\mu }}$ 来代替的）。具有阶数 $k$ 的爱尔朗过程被称为k阶爱尔朗（k-stage Erlang），对应的随机变量可被视为k个独立同参数指数分布随机变量之和。
依据上下文环境不同，均值参数 $\mu$ 可以指整个爱尔朗分布的均值 $\mu _ {0}$ 也可以指每个指数分布的均值 $\mu _ {i}$ 。两者的关系是： $$\mu _ {i}={\frac {\mu _ {0}}{k}}$$</description>
    </item>
    
    <item>
      <title>FMAM - 预备内容：从泊松分布到泊松过程 - Chapter 1</title>
      <link>https://chongg039.cn/post/fmam-prepare-1/</link>
      <pubDate>Mon, 16 Jul 2018 09:33:33 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-prepare-1/</guid>
      <description>泊松分布 泊松分布由二项分布演变而来。二项分布：
事件 A 在一次实验中发生的概率为 P ，将这个实验独立地重复 n 次，即做 n 次独立重复的伯努利实验，在这 n 次实验中事件A发生的次数记为 x ，概率有：
$$P(x=k)=C _ {n}^{k}p^{k}(1-p)^{n-k}$$，记为 $X\sim B(n,p)$ ，期望 $E=pn$
认为在 n 趋于无穷大时，p 为无穷小，期望值不变为一常数，记 $E=pn=\lambda$
即：$$p=\frac{\lambda}{n}$$，则当 $n \to +\infty$ 时，P 将趋于泊松分布：$$P(x=k)= e^{-\lambda}\frac{\lambda^{k}}{k!}$$
期望和方差都是 $\lambda$ ，$\lambda$ 表示一段时间内事件发生的次数。
泊松分布实例：
 一本书里，印刷错误的字的个数 一段时间内的次品率 某医院平均每小时出生的婴儿数 某网站每分钟的访问次数  独立增量过程 亦称可加过程（additive process)，是在不相交时段上增量相互独立的随机过程。
考虑实值过程 $$ X _ {t}, t \in T $$
如果对于任意参数 $$ t _ {0} &amp;lt; t _ {1} &amp;lt; &amp;hellip; t _ {n} $$</description>
    </item>
    
    <item>
      <title>Fundamentals of Matrix-Analytic Methods 学习笔记 -- 开坑篇</title>
      <link>https://chongg039.cn/post/fmam-start/</link>
      <pubDate>Thu, 12 Jul 2018 11:19:49 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/fmam-start/</guid>
      <description>教研室老板要求学习 Qi-Ming He 老师的这本书 Fundamentals of Matrix-Analytic Methods，于是准备开一个新坑，翻译一下这本书的关键内容，做做笔记，并对一些预备内容（概率分布、矩阵分析等）作解读。
文章的标题格式为“书名简称” + “中文章节名”，笔记将穿插在其中以代码块或其他形式存在。预备内容标题格式为“书名简称” + “预备内容：标题” + “大致章节名”。
以此来督促自己研究生期间好好学习。</description>
    </item>
    
    <item>
      <title>从 Reddit 愚人节像素大战说起</title>
      <link>https://chongg039.cn/post/2017-reddit-place/</link>
      <pubDate>Mon, 10 Apr 2017 23:01:33 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/2017-reddit-place/</guid>
      <description>&lt;p&gt;愚人节当天，我因为打球扭伤了自己的脚踝。那两天躺在床上无聊之余翻到了霍老师的一篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/Pz0NZ2t9fd_-RNFj1rT0hA&#34;&gt;《参与这场线上大战之后，我觉得人类未来还是有希望的》&lt;/a&gt;     (公众号：歪理邪说)&lt;/p&gt;
&lt;p&gt;这篇文章让我产生了极大的兴趣，立刻忍着疼痛抱来了电脑，登上了 Reddit 参与了这场线上大战。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Cloudflare 为自定义域名的 Github 博客完成全站 HTTPS 化</title>
      <link>https://chongg039.cn/post/all-https/</link>
      <pubDate>Wed, 22 Mar 2017 22:51:09 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/all-https/</guid>
      <description>&lt;p&gt;跟风，响应 Web 世界的号召，决定把博客全站换成 HTTPS 访问，并记录下遇到的一些问题。&lt;/p&gt;
&lt;h3 id=&#34;github-page&#34;&gt;Github Page&lt;/h3&gt;
&lt;p&gt;原来博客是部署在云服务器上，后来觉得没有这个必要，也不想花精力在维护上面，就重新把博客放回了 Github Page 。因此下面的文字并不针对自有服务器的博客用户进行说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决 Go 中遍历 map 的随机化问题</title>
      <link>https://chongg039.cn/post/map-in-order/</link>
      <pubDate>Mon, 13 Mar 2017 18:51:20 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/map-in-order/</guid>
      <description>&lt;p&gt;在 air-server 中有一个函数，支持解析 URL 的 query 并返回字段中城市的数据，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /aqi/cities?1=成都&amp;amp;2=北京&amp;amp;3=杭州&amp;amp;4=西安
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端希望的返回值应该是按照输入顺序，即 1，2，3，4 返回的，但实际多次测试后得到的结果总会是不一样的顺序。想了想应该是 query 解析的结果，即&lt;code&gt;r.URL.Query()&lt;/code&gt;为 map 的原因。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go实现空气质量状况API服务器过程中的思考</title>
      <link>https://chongg039.cn/post/aqi-server-in-go/</link>
      <pubDate>Sat, 04 Mar 2017 16:27:52 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/aqi-server-in-go/</guid>
      <description>&lt;p&gt;学习Go之后第一个项目，是编写一个API服务器，提供城市AQI的JSON数据。&lt;/p&gt;
&lt;p&gt;既然要实现这个功能，要解决的问题一个是数据源，一个是Server。&lt;/p&gt;
&lt;p&gt;先说说数据源，如果仅仅和我们初步设想的一样，仅仅为我们的一款应用提供即时数据，那样只是做一个第三方数据的中转便可。不过为了以后可以针对性的做数据分析，还是需要将数据爬下来存在数据库。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我为什么选择Go</title>
      <link>https://chongg039.cn/post/why-i-choose-go/</link>
      <pubDate>Mon, 27 Feb 2017 12:50:39 +0800</pubDate>
      
      <guid>https://chongg039.cn/post/why-i-choose-go/</guid>
      <description>&lt;p&gt;是的，我开始接触go语言了，如去年年底所说的那样。&lt;/p&gt;
&lt;p&gt;先说说我为什么不继续用Node，并不是因为这门语言不好。事实上，NodeJS作为一个争议颇多的“全栈”语言，才带我真正走进了编程世界。它的异步，并发，非阻塞，以及丰富的npm库，无一不证明了它在解决传统服务器端编程的很多非常棒的思想。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年终总结</title>
      <link>https://chongg039.cn/post/2016-summary/</link>
      <pubDate>Sat, 31 Dec 2016 16:59:03 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/2016-summary/</guid>
      <description>&lt;p&gt;年底了，总结一下这一年。&lt;/p&gt;
&lt;h4 id=&#34;工作室&#34;&gt;工作室&lt;/h4&gt;
&lt;p&gt;这一年有大半时间都是在创萌工作室度过的，也见证了创萌从当时的三五个人到现在的规模。&lt;/p&gt;
&lt;p&gt;工作室的巨总和迪哥算是我的导师。迪哥带着我从前端转向了nodejs，教会我如何作为一名全栈工程师来思考问题。而巨总眼界比较开阔，给我的更多是学习方法和技术趋势的指导。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 nodejs 模拟登陆电子科大信息门户并抓取信息</title>
      <link>https://chongg039.cn/post/mockland-uestc/</link>
      <pubDate>Thu, 08 Dec 2016 12:09:31 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/mockland-uestc/</guid>
      <description>&lt;p&gt;学校高层做了个公众号，把信息门户弄到微信上的浏览器上。本着干掉学校高层的一贯行事风格，觉得是时候搞一个正规的公众号来抢学校生意了。&lt;/p&gt;
&lt;p&gt;结果没想到并不是很顺利，信息门户登录有两个重定向页面，自己也对模拟请求服务器不是很熟悉，一步一步好歹是扒到了想要的数据，也浪费了好长时间。先拿出来了个命令行版本，还停留在 es5，准备熬过去考试月后全部重构成 es6，再加上流程控制，放到公众号上造福社会。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 服务器配置静态 IP 并 802.1x 拨号</title>
      <link>https://chongg039.cn/post/linux-server-staticip-8021x/</link>
      <pubDate>Sat, 12 Nov 2016 15:15:27 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/linux-server-staticip-8021x/</guid>
      <description>&lt;p&gt;终于布好工作室的服务器了。&lt;/p&gt;
&lt;p&gt;我写了个脚本一键部署静态ip和802.1x拨号：&lt;a href=&#34;https://gist.github.com/chongg039/3310467e329e00de3b6b04aaae646f3c&#34;&gt;ubuntu-server.sh&lt;/a&gt;，不想看我啰嗦的可以直接拿过来改改就能用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 vultr &#43; SS &#43; 锐速科学上网</title>
      <link>https://chongg039.cn/post/vultr-ss-serverspeed/</link>
      <pubDate>Mon, 03 Oct 2016 20:32:20 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/vultr-ss-serverspeed/</guid>
      <description>&lt;p&gt;接手工作室后，tesths 便把原来那个已经配置好的ss账号连同服务器一块给销了。平时ss又十分必要，就向他讨要了具体的方法，自己搭了一个。这里也是把方法贴出来。&lt;/p&gt;
&lt;h3 id=&#34;配置vultr主机&#34;&gt;配置vultr主机&lt;/h3&gt;
&lt;p&gt;V家的主机算得上是性价比较高的一款了，而且有日本和新加坡的线路，相对来说延迟比较稳定。截止我购买的时候是每个新用户有20刀的返利，还是比较划算的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决 ubuntu 下键盘错位问题</title>
      <link>https://chongg039.cn/post/ubuntu-keyboard-error/</link>
      <pubDate>Sun, 02 Oct 2016 15:43:36 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/ubuntu-keyboard-error/</guid>
      <description>&lt;p&gt;很悲催的键盘错位了，就这个系统有问题，以前也没遇到过。简而言之就是@和“互换，#打不出来等。问题不大，但是影响输入体验。
工作室的小伙伴都说我这电脑只有我会用。。。&lt;/p&gt;
&lt;p&gt;之前在网上搜到的解决办法是在终端输入：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo dpkg-reconfigure keyboard-configuration
//需要安装keyboard-configuration&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>使用ngrok实现内网穿透</title>
      <link>https://chongg039.cn/post/ngrok/</link>
      <pubDate>Sun, 18 Sep 2016 09:37:45 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/ngrok/</guid>
      <description>&lt;p&gt;今天想用nodejs写一个微信公众号服务，很尴尬的发现自己的腾讯云学生服务器已经三个月没续费被收回了。工作室的这台服务器又不是很想动，于是就想到前一段时间看的一个实现内网穿透的工具ngrok，花了一段时间部署在了自己的ubuntu上。又化了两块钱买了个域名，准备以后作为工作室测试来用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自用 Chrome 插件分享</title>
      <link>https://chongg039.cn/post/chrome-extensions/</link>
      <pubDate>Sat, 21 May 2016 15:45:01 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/chrome-extensions/</guid>
      <description>&lt;p&gt;这里会持续不断分享一些自己觉的好用的 Chrome 插件，有些也会弃用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建 Linux 开发环境</title>
      <link>https://chongg039.cn/post/build-ubuntu-environment/</link>
      <pubDate>Thu, 12 May 2016 19:29:07 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/build-ubuntu-environment/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;先说说我为啥要干这事儿。
前段时间迪哥要我们用node搞一个最小化 MEAN 产品，没想到只是在搭建开发环境上windows就各种不兼容，出现了许多奇奇怪怪的bug，再加上国内关于node的开发教程确实相对比较少，没有好的学习资源。搞了virtualbox虚拟机，但是内存和性能又开始捉急。干脆换到ubuntu，一步到位，特此记录下过程。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>说说es5中的闭包</title>
      <link>https://chongg039.cn/post/talk-about-closure/</link>
      <pubDate>Mon, 18 Apr 2016 19:26:22 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/talk-about-closure/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;匿名函数&lt;/strong&gt;：下面是最常见的一种&lt;strong&gt;函数表达式&lt;/strong&gt;的书写形式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var functionName = function(arg0, arg1, arg2){
    //函数体
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即：创建一个函数，并将其复制给变量&lt;code&gt;functionName&lt;/code&gt;，这种情况下创建的函数叫做匿名函数(anonymous function)，&lt;strong&gt;因为&lt;/strong&gt;&lt;code&gt;function&lt;/code&gt;&lt;strong&gt;后面没有标识符&lt;/strong&gt;，其&lt;code&gt;name&lt;/code&gt;属性是空字符串。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写在前面</title>
      <link>https://chongg039.cn/post/hello-world/</link>
      <pubDate>Sun, 17 Apr 2016 19:29:07 -0700</pubDate>
      
      <guid>https://chongg039.cn/post/hello-world/</guid>
      <description>&lt;h2 id=&#34;我为什么建博客&#34;&gt;我为什么建博客&lt;/h2&gt;
&lt;p&gt;大二本科加入创萌工作室学习前端，整个学习阶段对于笔记以及感悟的整理从印象，有道云转移到Quip，感觉最好还是有一个独立博客更为方便。在爬了两个星期的坑后使用Hexo+huno主题以及一些开源插件完成了整个博客的大致创建。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://chongg039.cn/about/</link>
      <pubDate>Sat, 22 Aug 2015 06:42:21 -0700</pubDate>
      
      <guid>https://chongg039.cn/about/</guid>
      <description>Co1driver，本科毕业于蓉城某辣鸡 985 院校计算机专业，前创萌工作室负责人，本校研究生在读。
工作室期间师从 isomker， tesths 两位不大不小的牛人，从前端转后端，导致各种语言、框架、工具都会一些。
这个博客从考研开始就有些荒废了，现在准备重新拾起来，写一点研究生期间学习的感悟。如果有兴趣也可以通过微信，Twitter 和我交流。
博客托管在 Github 上，自己用 Hugo 写了个简单的模板用着，图片放在 Flickr 的图床里，应该需要科研上网才能访问。下面的联系方式经过 base64 简单处理，请解码后查看。
对我或者本站有意见和建议也可以通过邮件和我联系，希望你生活愉快！
Wechat：aHR0cHM6Ly9jMS5zdGF0aWNmbGlja3IuY29tLzMvMjgzNS8zMjc0MzcyNzE0NF9mN2U5ZjdkOTBiX3EuanBnCg==
Twitter：aHR0cHM6Ly9jMS5zdGF0aWNmbGlja3IuY29tLzMvMjkzMy8zMzQ1NzQ5OTUwMV8wNzkzNjhlMTJmX3EuanBnCg==
Gmail：Y2hvbmdnMDM5QGdtYWlsLmNvbQo=</description>
    </item>
    
  </channel>
</rss>